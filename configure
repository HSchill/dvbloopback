#!/bin/bash

die(){
    echo -en "
\E[1;33;44m$1, aborting...\E[0m

"
    exit 1
}

die_unknown(){
    echo -en "
\E[1;33;44mUnknown option \"$1\".\E[0m

"
    ./configure --help
    exit 1
}

confirmno(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        *)
            false
            ;;
    esac
}

confirmyes(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [Y/n]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        [nN][oO]|[nN])
            false
            ;;
        *)
            true
            ;;
    esac
}

experimental_api(){
echo -en "
\E[1;33;44m
Your kernel or v4l media stack is compiled with

CONFIG_MEDIA_CONTROLLER_DVB=y, or
CONFIG_MEDIA_CONTROLLER_DVB=m

This is a new and experimental api.

The dvbloopback module will likely
crash your kernel.

You are heading for DISASTER!!!

Recompile your kernel/v4l media stack with:

# CONFIG_MEDIA_CONTROLLER_DVB is not set

Aborting...

Feel free to patch the dvbloopback module
so it can coexist with Mauro's new api.
If you do, please share your patch.
\E[0m

"
exit 1
}

show_help(){
  echo " Usage: ./configure --opt1=<opt> --opt2=<opt>"
  echo "                        "
  echo " Options: [default], if any, in brackets after option."
  echo "                        "
  echo " --help                 Print this message"
  echo "                        "
  echo " --stock=<opt>          [yes] When running a Debian/Ubuntu"
  echo "                        stock kernel, recompile it with"
  echo "                        dvbloopback driver and dvb-core patch"
  echo "                        Only for Debian stable or"
  echo "                        latest Ubuntu LTS"
  echo "                        "
  echo " --vanilla=<bool>       specify a the vanilla kernel version you"
  echo "                        want to compile. Like --vanilla=3.18.12"
  echo "                        This disables --stock option"
  echo "                        "
  echo " --v4l=<opt>            [no] yes: compile current v4l tree"
  echo "                        against your running kernel"
  echo "                        Disables --stock= and --vanilla="
  echo "                        "
  echo " --adapters=<opt>       [16] Set max number of adapters that are allowed,"
  echo "                        twice the number of physical adapters is needed."
  echo "                        "
  echo " --update=<opt>         [yes] no: don't auto-update or clean this repo"
  echo "                        "
}

stock_opt="yes"
vanilla_opt=""
v4l_opt="no"
adapters_opt="16"
update_opt="yes"

for opt do
  optval="${opt#*=}"
  case "$opt" in
  --help) show_help
  ;;
  --stock=*) stock_opt="$optval"
  ;;
  --vanilla=*) stock_opt="no"; v4l_opt="no"; vanilla_opt="$optval"
  ;;
  --v4l=*) stock_opt="no"; vanilla_opt=""; v4l_opt="$optval"
  ;;
  --adapters=*) adapters_opt="$optval"
  ;;
  --update=*) update_opt="$optval"
  ;;
  *)
  die_unknown $opt
  ;;
  esac
done

# Check git status
if [ "x$update_opt" = "xyes" ]; then
  if [ -d linux* ]; then
    rm -rf linux*
  fi
  if [ -d media* ]; then
    rm -rf media*
  fi
  git clean -xfd > /dev/null
  git reset --hard HEAD > /dev/null
  git remote update > /dev/null 2>&1
  if ! [ "$?" -eq 0 ]; then
    echo -en "
\E[1;33;44m
###################################

Error(s) encountered while updating

the status from remote git repo.

Aborting...

####################################
\E[0m

"
    exit 1
  fi
  LOCAL=$(git rev-parse @{0})
  REMOTE=$(git rev-parse @{u})
  BASE=$(git merge-base @{0} @{u})

  if [ $LOCAL = $REMOTE ]; then
    GITSTATUS="0"    # "Up-to-date"
  elif [ $LOCAL = $BASE ]; then
    GITSTATUS="1"    # "Need to pull"
  elif [ $REMOTE = $BASE ]; then
    GITSTATUS="2"    # "Need to push"
  else
    GITSTATUS="3"    # "Diverged"
  fi
  if [ "$GITSTATUS" -eq "0" ]; then
    echo "
Your local clone is clean and up-to-date
"
    sleep 3
  elif [ "$GITSTATUS" -eq "1" ]; then
    echo "
Going to sync your local clone with updated remote repo.

"
    sleep 3
    git pull > /dev/null
    if ! [ "$?" -eq 0 ]; then
      echo -en "
\E[1;33;44m
###################################

Error(s) encountered while syncing

local with remote git repo

Aborting...

####################################
\E[0m

"
      exit 1
    else
      echo -en "

############################################################

Synced with remote repo successfully! Please rerun

./configure to complete installation of dvbloopback drivers.

Arrow up and enter will get you there.

############################################################


"
      exit 0
    fi
  elif [ "$GITSTATUS" -eq "2" -o "$GITSTATUS" -eq "3" ]; then
    echo -en "
\E[1;33;44m
#####################################

Your local clone cannot be synced

with remote repo due to local changes

Aborting...

######################################
\E[0m

"
    exit 1
  fi    
fi

# Get build-deps, Debian/Ubuntu only.
if [ -f /usr/bin/lsb_release ]; then
  OS=$( lsb_release -si )
  RELEASE=$( lsb_release -sc )
fi

if ! [ "$OS" = "Debian" -o "$OS" = "Ubuntu" ] ; then
  stock_opt=no
else
  if ! dpkg-query -l build-essential | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency build-essential, marking for installation.

"
    apt-get install build-essential -y || die "Error installing dependency build-essential"
  fi
  apt-get build-dep --no-install-recommends linux -y
  if ! [ "$?" -eq "0" ]; then
    echo "
Error(s) while installing build dependencies

Aborting...
"
    exit 1
  fi
  apt-get install kernel-package bin86 devscripts makedumpfile libelf-dev binutils-dev fakeroot crash kernel-wedge libncurses5 libncurses5-dev asciidoc flex bison initramfs-tools patch patchutils libfile-fcntllock-perl libproc-processtable-perl libdigest-sha-perl --no-install-recommends -y
  if ! [ "$?" -eq "0" ]; then
    echo "
Error(s) while installing build dependencies

Aborting...
"
    exit 1
  fi
  if ! [ "$RELEASE" = "jessie" -o "$RELEASE" = "trusty" ];then
    if [ "x$stock_opt" = "xyes" ]; then
      echo "
Recompiling a stock kernel is only supported in

Debian Jessie (latest stable) or Ubuntu Trusty (latest LTS).

You can choose to compile a vanilla kernel or the v4l tree.

Aborting...
"
      exit 1
    fi
  fi
  if [ "x$stock_opt" = "xno" ]; then
    if [ "x$vanilla_opt" = "x" ] && [ "x$v4l_opt" = "xno" ]; then
      echo "
You should use either the --vanilla= or the --v4l= flag.

Aborting...
"
      exit 1
    fi
  fi
fi

#
# Get the source
#

# Debian
if [ "x$stock_opt" = "xyes" ]; then
  if [ "$OS" = "Debian" ]; then
    apt-get -t jessie source linux -y || die "Error(s) while fetching Debian Linux source"
    cd linux-*
  elif [ "$OS" = "Ubuntu" ]; then
    apt-get source linux -y || die "Error(s) while fetching Ubuntu Linux source"
    cd linux-*
  fi
fi

# v4l
if [ "x$v4l_opt" = "xyes" ];then
  git clone git://linuxtv.org/media_build.git || die "Error(s) while fetching v4l build system"
  git clone git://linuxtv.org/media_tree.git || die "Error(s) while fetching v4l source tree"
fi

# Other
if [ "x$vanilla_opt" != "x" ];then
  MAJOR=$(echo "$vanilla_opt" | cut -d'.' -f1)
  VERSION=$( echo "$vanilla_opt" | cut -d'.' -f2 | cut -d'-' -f1 )
  if [ "$MAJOR" -lt "3" ]; then
    echo "
Minimum supported kernel version is linux-3.10.x
You requested linux-$vanilla_opt
Aborting...
"
    exit 1
  fi
  if [ "$MAJOR" -eq "3" ] && [ "$VERSION" -lt "10" ]; then
    echo "
Minimum supported kernel version is linux-3.10.x
You requested linux-$vanilla_opt
Aborting...
"
    exit 1
  fi
  if ! echo "$vanilla_opt" | grep "rc" > /dev/null 2>&1; then
    wget https://www.kernel.org/pub/linux/kernel/v$MAJOR.x/linux-$vanilla_opt.tar.xz || die "Error(s) while fetching Linux source"
  else
    wget https://www.kernel.org/pub/linux/kernel/v4.x/testing/linux-$vanilla_opt.tar.xz || die "Error(s) while fetching Linux source"
  fi
  tar -xJf linux-$vanilla_opt.tar.xz
  cd linux-$vanilla_opt
  make clean && make mrproper
fi

#
# Patch the source
#

# Common
if [ "x$v4l_opt" = "xno" ]; then
  mkdir drivers/media/pci/dvbloopback
  cp -f ../dvbloopback/* drivers/media/pci/dvbloopback/
  patch -p0 < ../dvbloopback.patch
  FIRST_DIGIT=$( echo `pwd` | grep -o '[[:digit:]]\+' | head -n2 | awk 'NR==2' )
  SECOND_DIGIT=$( echo `pwd` | grep -o '[[:digit:]]\+' | head -n3 | awk 'NR==3' )
  if [ "$FIRST_DIGIT" -lt "4" ] && [ "$SECOND_DIGIT" -lt "13" ]; then
    patch -p0 < ../3.7-dvb-core.patch
  else
    patch -p0 < ../3.13-dvb-core.patch
  fi
fi

# v4l
if [ "x$v4l_opt" = "xyes" ]; then
  cd media_tree
  mkdir drivers/media/pci/dvbloopback
  cp -f ../dvbloopback/* drivers/media/pci/dvbloopback/
  patch -p0 < ../dvbloopback.patch
  patch -p0 < ../3.13-dvb-core.patch
  git add -A
  git commit -a -m 'Add dvbloopback driver, patch dvb-core.'
  cd ../media_build
  patch -p0 < ../v4l-make-install.patch
  git commit -a -m 'Install drivers in /lib/modules/`uname -r`/updates/media'
  make dir DIR=../media_tree
fi

#
# Configure the source
#

# Debian

# v4l
if [ "x$v4l_opt" = "xyes" ]; then
  make distclean
  make allyesconfig
  sed -i 's/CONFIG_DVB_MAX_ADAPTERS=8/CONFIG_DVB_MAX_ADAPTERS=$adapters_opt/' v4l/.config
  sed -i 's/CONFIG_MEDIA_CONTROLLER_DVB=y/# CONFIG_MEDIA_CONTROLLER_DVB is not set/' v4l/.config
fi

# Other


#
# Compile the source
#

# Debian

# v4l
if [ "x$v4l_opt" = "xyes" ]; then
  make
  if ! [ "$?" -eq "0" ]; then
    echo "
Error(s) while compiling the v4l source.
Try again in a couple of days, the error(s)
will probably be fixed upstream by then.
Aborting...
"
    exit 1
  fi
fi

# Other


#
# Install the result
#

# Debian

# v4l
if [ "x$v4l_opt" = "xyes" ]; then
  make install
fi

# Other

